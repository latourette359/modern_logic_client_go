/*
Modern Logic Api

Manage and version your customer decision logic outside of your codebase

API version: 1.0.0
Contact: info@usemodernlogic.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package modern_logic_client

import (
	"encoding/json"
)

// DataSourceCallItem struct for DataSourceCallItem
type DataSourceCallItem struct {
	Id *int32 `json:"id,omitempty"`
	ExecutionId *int32 `json:"executionId,omitempty"`
	DataSourceId *int32 `json:"dataSourceId,omitempty"`
}

// NewDataSourceCallItem instantiates a new DataSourceCallItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataSourceCallItem() *DataSourceCallItem {
	this := DataSourceCallItem{}
	return &this
}

// NewDataSourceCallItemWithDefaults instantiates a new DataSourceCallItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataSourceCallItemWithDefaults() *DataSourceCallItem {
	this := DataSourceCallItem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DataSourceCallItem) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceCallItem) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DataSourceCallItem) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *DataSourceCallItem) SetId(v int32) {
	o.Id = &v
}

// GetExecutionId returns the ExecutionId field value if set, zero value otherwise.
func (o *DataSourceCallItem) GetExecutionId() int32 {
	if o == nil || o.ExecutionId == nil {
		var ret int32
		return ret
	}
	return *o.ExecutionId
}

// GetExecutionIdOk returns a tuple with the ExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceCallItem) GetExecutionIdOk() (*int32, bool) {
	if o == nil || o.ExecutionId == nil {
		return nil, false
	}
	return o.ExecutionId, true
}

// HasExecutionId returns a boolean if a field has been set.
func (o *DataSourceCallItem) HasExecutionId() bool {
	if o != nil && o.ExecutionId != nil {
		return true
	}

	return false
}

// SetExecutionId gets a reference to the given int32 and assigns it to the ExecutionId field.
func (o *DataSourceCallItem) SetExecutionId(v int32) {
	o.ExecutionId = &v
}

// GetDataSourceId returns the DataSourceId field value if set, zero value otherwise.
func (o *DataSourceCallItem) GetDataSourceId() int32 {
	if o == nil || o.DataSourceId == nil {
		var ret int32
		return ret
	}
	return *o.DataSourceId
}

// GetDataSourceIdOk returns a tuple with the DataSourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceCallItem) GetDataSourceIdOk() (*int32, bool) {
	if o == nil || o.DataSourceId == nil {
		return nil, false
	}
	return o.DataSourceId, true
}

// HasDataSourceId returns a boolean if a field has been set.
func (o *DataSourceCallItem) HasDataSourceId() bool {
	if o != nil && o.DataSourceId != nil {
		return true
	}

	return false
}

// SetDataSourceId gets a reference to the given int32 and assigns it to the DataSourceId field.
func (o *DataSourceCallItem) SetDataSourceId(v int32) {
	o.DataSourceId = &v
}

func (o DataSourceCallItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ExecutionId != nil {
		toSerialize["executionId"] = o.ExecutionId
	}
	if o.DataSourceId != nil {
		toSerialize["dataSourceId"] = o.DataSourceId
	}
	return json.Marshal(toSerialize)
}

type NullableDataSourceCallItem struct {
	value *DataSourceCallItem
	isSet bool
}

func (v NullableDataSourceCallItem) Get() *DataSourceCallItem {
	return v.value
}

func (v *NullableDataSourceCallItem) Set(val *DataSourceCallItem) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSourceCallItem) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSourceCallItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSourceCallItem(val *DataSourceCallItem) *NullableDataSourceCallItem {
	return &NullableDataSourceCallItem{value: val, isSet: true}
}

func (v NullableDataSourceCallItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSourceCallItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


