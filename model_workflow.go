/*
Modern Logic Api

Manage and version your customer decision logic outside of your codebase

API version: 1.0.0
Contact: info@usemodernlogic.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package modern_logic_client

import (
	"encoding/json"
)

// Workflow struct for Workflow
type Workflow struct {
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	CurrentProductionVersion *int32 `json:"currentProductionVersion,omitempty"`
}

// NewWorkflow instantiates a new Workflow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflow() *Workflow {
	this := Workflow{}
	return &this
}

// NewWorkflowWithDefaults instantiates a new Workflow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowWithDefaults() *Workflow {
	this := Workflow{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Workflow) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workflow) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Workflow) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Workflow) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Workflow) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workflow) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Workflow) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Workflow) SetName(v string) {
	o.Name = &v
}

// GetCurrentProductionVersion returns the CurrentProductionVersion field value if set, zero value otherwise.
func (o *Workflow) GetCurrentProductionVersion() int32 {
	if o == nil || o.CurrentProductionVersion == nil {
		var ret int32
		return ret
	}
	return *o.CurrentProductionVersion
}

// GetCurrentProductionVersionOk returns a tuple with the CurrentProductionVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workflow) GetCurrentProductionVersionOk() (*int32, bool) {
	if o == nil || o.CurrentProductionVersion == nil {
		return nil, false
	}
	return o.CurrentProductionVersion, true
}

// HasCurrentProductionVersion returns a boolean if a field has been set.
func (o *Workflow) HasCurrentProductionVersion() bool {
	if o != nil && o.CurrentProductionVersion != nil {
		return true
	}

	return false
}

// SetCurrentProductionVersion gets a reference to the given int32 and assigns it to the CurrentProductionVersion field.
func (o *Workflow) SetCurrentProductionVersion(v int32) {
	o.CurrentProductionVersion = &v
}

func (o Workflow) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.CurrentProductionVersion != nil {
		toSerialize["currentProductionVersion"] = o.CurrentProductionVersion
	}
	return json.Marshal(toSerialize)
}

type NullableWorkflow struct {
	value *Workflow
	isSet bool
}

func (v NullableWorkflow) Get() *Workflow {
	return v.value
}

func (v *NullableWorkflow) Set(val *Workflow) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflow) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflow(val *Workflow) *NullableWorkflow {
	return &NullableWorkflow{value: val, isSet: true}
}

func (v NullableWorkflow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


