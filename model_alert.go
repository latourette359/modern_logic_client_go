/*
Modern Logic Api

Manage and version your customer decision logic outside of your codebase

API version: 1.0.0
Contact: info@usemodernlogic.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package modern_logic_client

import (
	"encoding/json"
)

// Alert struct for Alert
type Alert struct {
	Id *int32 `json:"id,omitempty"`
	AssignedTo *string `json:"assignedTo,omitempty"`
	DateOpened *string `json:"dateOpened,omitempty"`
	Description *string `json:"description,omitempty"`
	ExecutionId *int32 `json:"executionId,omitempty"`
}

// NewAlert instantiates a new Alert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlert() *Alert {
	this := Alert{}
	return &this
}

// NewAlertWithDefaults instantiates a new Alert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertWithDefaults() *Alert {
	this := Alert{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Alert) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Alert) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Alert) SetId(v int32) {
	o.Id = &v
}

// GetAssignedTo returns the AssignedTo field value if set, zero value otherwise.
func (o *Alert) GetAssignedTo() string {
	if o == nil || o.AssignedTo == nil {
		var ret string
		return ret
	}
	return *o.AssignedTo
}

// GetAssignedToOk returns a tuple with the AssignedTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetAssignedToOk() (*string, bool) {
	if o == nil || o.AssignedTo == nil {
		return nil, false
	}
	return o.AssignedTo, true
}

// HasAssignedTo returns a boolean if a field has been set.
func (o *Alert) HasAssignedTo() bool {
	if o != nil && o.AssignedTo != nil {
		return true
	}

	return false
}

// SetAssignedTo gets a reference to the given string and assigns it to the AssignedTo field.
func (o *Alert) SetAssignedTo(v string) {
	o.AssignedTo = &v
}

// GetDateOpened returns the DateOpened field value if set, zero value otherwise.
func (o *Alert) GetDateOpened() string {
	if o == nil || o.DateOpened == nil {
		var ret string
		return ret
	}
	return *o.DateOpened
}

// GetDateOpenedOk returns a tuple with the DateOpened field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetDateOpenedOk() (*string, bool) {
	if o == nil || o.DateOpened == nil {
		return nil, false
	}
	return o.DateOpened, true
}

// HasDateOpened returns a boolean if a field has been set.
func (o *Alert) HasDateOpened() bool {
	if o != nil && o.DateOpened != nil {
		return true
	}

	return false
}

// SetDateOpened gets a reference to the given string and assigns it to the DateOpened field.
func (o *Alert) SetDateOpened(v string) {
	o.DateOpened = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Alert) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Alert) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Alert) SetDescription(v string) {
	o.Description = &v
}

// GetExecutionId returns the ExecutionId field value if set, zero value otherwise.
func (o *Alert) GetExecutionId() int32 {
	if o == nil || o.ExecutionId == nil {
		var ret int32
		return ret
	}
	return *o.ExecutionId
}

// GetExecutionIdOk returns a tuple with the ExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetExecutionIdOk() (*int32, bool) {
	if o == nil || o.ExecutionId == nil {
		return nil, false
	}
	return o.ExecutionId, true
}

// HasExecutionId returns a boolean if a field has been set.
func (o *Alert) HasExecutionId() bool {
	if o != nil && o.ExecutionId != nil {
		return true
	}

	return false
}

// SetExecutionId gets a reference to the given int32 and assigns it to the ExecutionId field.
func (o *Alert) SetExecutionId(v int32) {
	o.ExecutionId = &v
}

func (o Alert) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.AssignedTo != nil {
		toSerialize["assignedTo"] = o.AssignedTo
	}
	if o.DateOpened != nil {
		toSerialize["dateOpened"] = o.DateOpened
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.ExecutionId != nil {
		toSerialize["executionId"] = o.ExecutionId
	}
	return json.Marshal(toSerialize)
}

type NullableAlert struct {
	value *Alert
	isSet bool
}

func (v NullableAlert) Get() *Alert {
	return v.value
}

func (v *NullableAlert) Set(val *Alert) {
	v.value = val
	v.isSet = true
}

func (v NullableAlert) IsSet() bool {
	return v.isSet
}

func (v *NullableAlert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlert(val *Alert) *NullableAlert {
	return &NullableAlert{value: val, isSet: true}
}

func (v NullableAlert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


