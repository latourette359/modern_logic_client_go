/*
Modern Logic Api

Manage and version your customer decision logic outside of your codebase

API version: 1.0.0
Contact: info@usemodernlogic.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package modern_logic_client

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DataSourcesApiService DataSourcesApi service
type DataSourcesApiService service

type ApiDatasourceCallsDatasourceCallIdGetRequest struct {
	ctx _context.Context
	ApiService *DataSourcesApiService
	datasourceCallId int32
}


func (r ApiDatasourceCallsDatasourceCallIdGetRequest) Execute() (DataSourceCall, *_nethttp.Response, error) {
	return r.ApiService.DatasourceCallsDatasourceCallIdGetExecute(r)
}

/*
DatasourceCallsDatasourceCallIdGet Get Data Source Call Details

A datasource call is a single instance of when a datasource was queried by a workflow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param datasourceCallId Data source call id
 @return ApiDatasourceCallsDatasourceCallIdGetRequest
*/
func (a *DataSourcesApiService) DatasourceCallsDatasourceCallIdGet(ctx _context.Context, datasourceCallId int32) ApiDatasourceCallsDatasourceCallIdGetRequest {
	return ApiDatasourceCallsDatasourceCallIdGetRequest{
		ApiService: a,
		ctx: ctx,
		datasourceCallId: datasourceCallId,
	}
}

// Execute executes the request
//  @return DataSourceCall
func (a *DataSourcesApiService) DatasourceCallsDatasourceCallIdGetExecute(r ApiDatasourceCallsDatasourceCallIdGetRequest) (DataSourceCall, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DataSourceCall
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataSourcesApiService.DatasourceCallsDatasourceCallIdGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/datasource_calls/{datasourceCallId}"
	localVarPath = strings.Replace(localVarPath, "{"+"datasourceCallId"+"}", _neturl.PathEscape(parameterToString(r.datasourceCallId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDatasourceDatasourceIdCallsGetRequest struct {
	ctx _context.Context
	ApiService *DataSourcesApiService
	datasourceId int32
	pageSize *int32
	pageNumber *int32
}

// Number of elements to return (default is 10)
func (r ApiDatasourceDatasourceIdCallsGetRequest) PageSize(pageSize int32) ApiDatasourceDatasourceIdCallsGetRequest {
	r.pageSize = &pageSize
	return r
}
// Lists are ordered by creation date ascending. To return the first page, set pageNumber to zero
func (r ApiDatasourceDatasourceIdCallsGetRequest) PageNumber(pageNumber int32) ApiDatasourceDatasourceIdCallsGetRequest {
	r.pageNumber = &pageNumber
	return r
}

func (r ApiDatasourceDatasourceIdCallsGetRequest) Execute() (ListResponse, *_nethttp.Response, error) {
	return r.ApiService.DatasourceDatasourceIdCallsGetExecute(r)
}

/*
DatasourceDatasourceIdCallsGet List Data Source Calls

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param datasourceId Specified workflow to run, to evaluate the target user.
 @return ApiDatasourceDatasourceIdCallsGetRequest
*/
func (a *DataSourcesApiService) DatasourceDatasourceIdCallsGet(ctx _context.Context, datasourceId int32) ApiDatasourceDatasourceIdCallsGetRequest {
	return ApiDatasourceDatasourceIdCallsGetRequest{
		ApiService: a,
		ctx: ctx,
		datasourceId: datasourceId,
	}
}

// Execute executes the request
//  @return ListResponse
func (a *DataSourcesApiService) DatasourceDatasourceIdCallsGetExecute(r ApiDatasourceDatasourceIdCallsGetRequest) (ListResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataSourcesApiService.DatasourceDatasourceIdCallsGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/datasource/{datasourceId}/calls"
	localVarPath = strings.Replace(localVarPath, "{"+"datasourceId"+"}", _neturl.PathEscape(parameterToString(r.datasourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.pageNumber != nil {
		localVarQueryParams.Add("pageNumber", parameterToString(*r.pageNumber, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDatasourceDatasourceIdGetRequest struct {
	ctx _context.Context
	ApiService *DataSourcesApiService
	datasourceId int32
}


func (r ApiDatasourceDatasourceIdGetRequest) Execute() (DataSource, *_nethttp.Response, error) {
	return r.ApiService.DatasourceDatasourceIdGetExecute(r)
}

/*
DatasourceDatasourceIdGet Get Data Source Details

Evaluates a new user using the specificed workflow and user details. Typically called during onboarding.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param datasourceId Data Source id
 @return ApiDatasourceDatasourceIdGetRequest
*/
func (a *DataSourcesApiService) DatasourceDatasourceIdGet(ctx _context.Context, datasourceId int32) ApiDatasourceDatasourceIdGetRequest {
	return ApiDatasourceDatasourceIdGetRequest{
		ApiService: a,
		ctx: ctx,
		datasourceId: datasourceId,
	}
}

// Execute executes the request
//  @return DataSource
func (a *DataSourcesApiService) DatasourceDatasourceIdGetExecute(r ApiDatasourceDatasourceIdGetRequest) (DataSource, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DataSource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataSourcesApiService.DatasourceDatasourceIdGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/datasource/{datasourceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"datasourceId"+"}", _neturl.PathEscape(parameterToString(r.datasourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDatasourceGetRequest struct {
	ctx _context.Context
	ApiService *DataSourcesApiService
	pageSize *int32
	pageNumber *int32
}

// Number of elements to return (default is 10)
func (r ApiDatasourceGetRequest) PageSize(pageSize int32) ApiDatasourceGetRequest {
	r.pageSize = &pageSize
	return r
}
// Lists are ordered by creation date ascending. To return the first page, set pageNumber to zero
func (r ApiDatasourceGetRequest) PageNumber(pageNumber int32) ApiDatasourceGetRequest {
	r.pageNumber = &pageNumber
	return r
}

func (r ApiDatasourceGetRequest) Execute() (ListResponse, *_nethttp.Response, error) {
	return r.ApiService.DatasourceGetExecute(r)
}

/*
DatasourceGet List Data Sources

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDatasourceGetRequest
*/
func (a *DataSourcesApiService) DatasourceGet(ctx _context.Context) ApiDatasourceGetRequest {
	return ApiDatasourceGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListResponse
func (a *DataSourcesApiService) DatasourceGetExecute(r ApiDatasourceGetRequest) (ListResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataSourcesApiService.DatasourceGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/datasource"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.pageNumber != nil {
		localVarQueryParams.Add("pageNumber", parameterToString(*r.pageNumber, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
