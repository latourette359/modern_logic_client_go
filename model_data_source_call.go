/*
Modern Logic Api

Manage and version your customer decision logic outside of your codebase

API version: 1.0.0
Contact: info@usemodernlogic.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package modern_logic_client

import (
	"encoding/json"
	"time"
)

// DataSourceCall struct for DataSourceCall
type DataSourceCall struct {
	Id *int32 `json:"id,omitempty"`
	ExecutionId *int32 `json:"executionId,omitempty"`
	DataSourceId *int32 `json:"dataSourceId,omitempty"`
	Request *map[string]interface{} `json:"request,omitempty"`
	Response *map[string]interface{} `json:"response,omitempty"`
	DateTimeOfCall *time.Time `json:"dateTimeOfCall,omitempty"`
}

// NewDataSourceCall instantiates a new DataSourceCall object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataSourceCall() *DataSourceCall {
	this := DataSourceCall{}
	return &this
}

// NewDataSourceCallWithDefaults instantiates a new DataSourceCall object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataSourceCallWithDefaults() *DataSourceCall {
	this := DataSourceCall{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DataSourceCall) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceCall) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DataSourceCall) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *DataSourceCall) SetId(v int32) {
	o.Id = &v
}

// GetExecutionId returns the ExecutionId field value if set, zero value otherwise.
func (o *DataSourceCall) GetExecutionId() int32 {
	if o == nil || o.ExecutionId == nil {
		var ret int32
		return ret
	}
	return *o.ExecutionId
}

// GetExecutionIdOk returns a tuple with the ExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceCall) GetExecutionIdOk() (*int32, bool) {
	if o == nil || o.ExecutionId == nil {
		return nil, false
	}
	return o.ExecutionId, true
}

// HasExecutionId returns a boolean if a field has been set.
func (o *DataSourceCall) HasExecutionId() bool {
	if o != nil && o.ExecutionId != nil {
		return true
	}

	return false
}

// SetExecutionId gets a reference to the given int32 and assigns it to the ExecutionId field.
func (o *DataSourceCall) SetExecutionId(v int32) {
	o.ExecutionId = &v
}

// GetDataSourceId returns the DataSourceId field value if set, zero value otherwise.
func (o *DataSourceCall) GetDataSourceId() int32 {
	if o == nil || o.DataSourceId == nil {
		var ret int32
		return ret
	}
	return *o.DataSourceId
}

// GetDataSourceIdOk returns a tuple with the DataSourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceCall) GetDataSourceIdOk() (*int32, bool) {
	if o == nil || o.DataSourceId == nil {
		return nil, false
	}
	return o.DataSourceId, true
}

// HasDataSourceId returns a boolean if a field has been set.
func (o *DataSourceCall) HasDataSourceId() bool {
	if o != nil && o.DataSourceId != nil {
		return true
	}

	return false
}

// SetDataSourceId gets a reference to the given int32 and assigns it to the DataSourceId field.
func (o *DataSourceCall) SetDataSourceId(v int32) {
	o.DataSourceId = &v
}

// GetRequest returns the Request field value if set, zero value otherwise.
func (o *DataSourceCall) GetRequest() map[string]interface{} {
	if o == nil || o.Request == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Request
}

// GetRequestOk returns a tuple with the Request field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceCall) GetRequestOk() (*map[string]interface{}, bool) {
	if o == nil || o.Request == nil {
		return nil, false
	}
	return o.Request, true
}

// HasRequest returns a boolean if a field has been set.
func (o *DataSourceCall) HasRequest() bool {
	if o != nil && o.Request != nil {
		return true
	}

	return false
}

// SetRequest gets a reference to the given map[string]interface{} and assigns it to the Request field.
func (o *DataSourceCall) SetRequest(v map[string]interface{}) {
	o.Request = &v
}

// GetResponse returns the Response field value if set, zero value otherwise.
func (o *DataSourceCall) GetResponse() map[string]interface{} {
	if o == nil || o.Response == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Response
}

// GetResponseOk returns a tuple with the Response field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceCall) GetResponseOk() (*map[string]interface{}, bool) {
	if o == nil || o.Response == nil {
		return nil, false
	}
	return o.Response, true
}

// HasResponse returns a boolean if a field has been set.
func (o *DataSourceCall) HasResponse() bool {
	if o != nil && o.Response != nil {
		return true
	}

	return false
}

// SetResponse gets a reference to the given map[string]interface{} and assigns it to the Response field.
func (o *DataSourceCall) SetResponse(v map[string]interface{}) {
	o.Response = &v
}

// GetDateTimeOfCall returns the DateTimeOfCall field value if set, zero value otherwise.
func (o *DataSourceCall) GetDateTimeOfCall() time.Time {
	if o == nil || o.DateTimeOfCall == nil {
		var ret time.Time
		return ret
	}
	return *o.DateTimeOfCall
}

// GetDateTimeOfCallOk returns a tuple with the DateTimeOfCall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceCall) GetDateTimeOfCallOk() (*time.Time, bool) {
	if o == nil || o.DateTimeOfCall == nil {
		return nil, false
	}
	return o.DateTimeOfCall, true
}

// HasDateTimeOfCall returns a boolean if a field has been set.
func (o *DataSourceCall) HasDateTimeOfCall() bool {
	if o != nil && o.DateTimeOfCall != nil {
		return true
	}

	return false
}

// SetDateTimeOfCall gets a reference to the given time.Time and assigns it to the DateTimeOfCall field.
func (o *DataSourceCall) SetDateTimeOfCall(v time.Time) {
	o.DateTimeOfCall = &v
}

func (o DataSourceCall) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ExecutionId != nil {
		toSerialize["executionId"] = o.ExecutionId
	}
	if o.DataSourceId != nil {
		toSerialize["dataSourceId"] = o.DataSourceId
	}
	if o.Request != nil {
		toSerialize["request"] = o.Request
	}
	if o.Response != nil {
		toSerialize["response"] = o.Response
	}
	if o.DateTimeOfCall != nil {
		toSerialize["dateTimeOfCall"] = o.DateTimeOfCall
	}
	return json.Marshal(toSerialize)
}

type NullableDataSourceCall struct {
	value *DataSourceCall
	isSet bool
}

func (v NullableDataSourceCall) Get() *DataSourceCall {
	return v.value
}

func (v *NullableDataSourceCall) Set(val *DataSourceCall) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSourceCall) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSourceCall) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSourceCall(val *DataSourceCall) *NullableDataSourceCall {
	return &NullableDataSourceCall{value: val, isSet: true}
}

func (v NullableDataSourceCall) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSourceCall) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


